import pandas as pd

def replace_dash_with_zero(df, columns):
    """
    Replace all occurrences of "-" with 0 under specified columns in a DataFrame,
    and ensure the values are numeric.

    Parameters:
        df (pandas.DataFrame): Input DataFrame.
        columns (list): List of column names where "-" should be replaced with 0.

    Returns:
        pandas.DataFrame: DataFrame with "-" replaced with 0 and converted to numeric under specified columns.
    """
    df_copy = df.copy()  # Make a copy to avoid modifying the original DataFrame
    df_copy[columns] = df_copy[columns].replace('-', 0)
    df_copy[columns] = df_copy[columns].apply(pd.to_numeric, errors='coerce')  # Convert to numeric
    return df_copy


# Example usage:
data = {
    'A': ['1', '2', '3', '-'],
    'B': ['-', '5', '6', '7'],
    'C': ['8', '-', '10', '11']
}

df = pd.DataFrame(data)
columns_to_replace = ['A', 'B']

result_df = replace_dash_with_zero(df, columns_to_replace)
print(result_df)
import pandas as pd

def cap_at_100(func):
    """
    Decorator function to cap the value returned by the decorated function at 100.

    Parameters:
        func: The function to be decorated.

    Returns:
        The decorated function.
    """
    def wrapper(row):
        result = func(row)
        # Cap the value at 100 if it exceeds 100
        if result[0] > 100:
            result = (100, result[1])  # Cap the first value (DettachmentPoint) at 100
        return result
    return wrapper

@cap_at_100
def custom_function(row):
    """
    Custom function to be applied to each row of the DataFrame.
    This function returns two values.

    Parameters:
        row (pandas.Series): A row of the DataFrame.

    Returns:
        tuple: A tuple containing two values.
    """
    # Example logic: return double the value in Column_A and the sum of Column_A and Column_B
    return row['Column_A'] * 2, row['Column_A'] + row['Column_B']

# Example usage:
data = {
    'Column_A': [1, 2, 3, 4, 5],
    'Column_B': [6, 7, 8, 9, 10]
}

df = pd.DataFrame(data)

# Apply the custom function to each row using apply, and assign the returned values to new columns
df['New_Column_1'], df['New_Column_2'] = zip(*df.apply(custom_function, axis=1))

print(df)


import pandas as pd
from datetime import datetime, timedelta

def status(last_updated):
    """
    Determine the status based on the difference between the last updated date and the reference date.

    Parameters:
        last_updated (datetime): The last updated date.

    Returns:
        str: "STALE" if last updated date is greater than 90 days before March 29, 2024, otherwise "OK".
    """
    reference_date = datetime(2024, 3, 29)
    if (reference_date - last_updated).days > 90:
        return "STALE"
    else:
        return "OK"

# Example usage:
data = {
    'Lastest Update': [datetime(2024, 3, 1), datetime(2023, 12, 31), datetime(2024, 1, 1)]
}

df = pd.DataFrame(data)

# Apply the status function to each row in the "Lastest Update" column using apply, and assign the status to a new column
df['Status'] = df['Lastest Update'].apply(status)

print(df)

