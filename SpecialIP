import pandas as pd
import numpy as np
import os
import shutil
from datetime import datetime, timedelta
import win32com.client as win32
import plotly.express as px
from openpyxl import load_workbook
import customtkinter as ctk
from tkinter import filedialog
from tkinter import StringVar, ttk

# === CONFIGURATION ===
BackupFolder = "ParValue_Backups"
DB_FILE = "pivoted_output.xlsx"
BACKUP_FILE = "pivoted_output_backup.xlsx"
CHANGES_FILE = "significant_changes.xlsx"
ABS_THRESHOLD = 100
PCT_THRESHOLD = 0.10
ISIN_COL = "ISIN"
PAR_VALUE_COL = "Par Value"

# === FUNCTION: CREATE INITIAL DATABASE ===
def create_database(file_path):
    df = pd.read_excel(file_path)
    date = pd.to_datetime(df['As of Date'].iloc[0]).strftime('%Y-%m-%d')
    df["Asset Class"] = df[["SEC 1", "SEC 2", "SEC 3", "Description"]].astype(str).agg('_'.join, axis=1)
    pivot = df.groupby([ISIN_COL, "Asset Class"])[PAR_VALUE_COL].sum().unstack().fillna(0)
    pivot.columns = [date]
    pivot.to_excel(DB_FILE)
    print(f"Initial database created with date: {date}")

# === FUNCTION: GUI TO VIEW EXCEL WITH SEARCH ===
def show_excel_gui(file_path, display_columns=None, isin_column='ISIN'):
    df = pd.read_excel(file_path)
    if display_columns:
        df = df[display_columns]

    app = ctk.CTk()
    app.title("Excel Viewer")
    app.geometry("1000x600")

    search_var = StringVar()

    
        for _, row in filtered.iterrows():
            tree.insert("", "end", values=list(row))

    def copy_selected_row(event):
        selected = tree.selection()
        if selected:
            values = tree.item(selected[0])['values']
            header = "	".join(tree['columns'])
            row_data = "	".join(map(str, values))
            full_data = f"{header}
{row_data}"
            app.clipboard_clear()
            app.clipboard_append(full_data)
            app.update()

    search_entry = ctk.CTkEntry(app, textvariable=search_var, placeholder_text="Search All Columns")
    search_entry.pack(pady=5)
    search_entry.bind("<KeyRelease>", lambda e: update_table())

    frame = ctk.CTkFrame(app)
    frame.pack(fill="both", expand=True)

    # Scrollbars
    x_scroll = ttk.Scrollbar(frame, orient="horizontal")
    y_scroll = ttk.Scrollbar(frame, orient="vertical")
    tree = ttk.Treeview(frame, columns=list(df.columns), show='headings', xscrollcommand=x_scroll.set, yscrollcommand=y_scroll.set)
    x_scroll.config(command=tree.xview)
    y_scroll.config(command=tree.yview)

    x_scroll.pack(side="bottom", fill="x")
    y_scroll.pack(side="right", fill="y")
    tree.pack(side="left", fill="both", expand=True)

    for col in df.columns:
        tree.heading(col, text=col)
        tree.column(col, width=120)

    tree.bind("<Button-3>", copy_selected_row)

        multi_filter_label = ctk.CTkLabel(app, text="Paste multiple Securities (one per line):")
    multi_filter_label.pack()

    multi_filter_box = ctk.CTkTextbox(app, height=80)
    multi_filter_box.pack(pady=5)

    

        for _, row in filtered.iterrows():
            tree.insert("", "end", values=list(row))

        update_table()
    app.mainloop()

# === FUNCTION: UPDATE DATABASE ===
def update_database(file_path):
    df_new = pd.read_excel(file_path)
    date = pd.to_datetime(df_new['As of Date'].iloc[0]).strftime('%Y-%m-%d')
    if os.path.exists(DB_FILE):
        db = pd.read_excel(DB_FILE, index_col=[0,1])
        if date in db.columns:
            ans = input(f"Date {date} already exists. Overwrite? (y/n): ")
            if ans.lower() != 'y':
                print("Update cancelled.")
                return
        shutil.copy(DB_FILE, BACKUP_FILE)
        df_new["Asset Class"] = df_new[["SEC 1", "SEC 2", "SEC 3", "Description"]].astype(str).agg('_'.join, axis=1)
        update = df_new.groupby([ISIN_COL, "Asset Class"])[PAR_VALUE_COL].sum().unstack().fillna(0)
        update.columns = [date]
        db = db.combine_first(update).fillna(0)
        db[date] = update[date]
    else:
        create_database(file_path)
        return
    db.to_excel(DB_FILE)
    print(f"Database updated with {date}.")

# === FUNCTION: DETECT SIGNIFICANT CHANGES ===
def detect_significant_changes(threshold_abs=ABS_THRESHOLD, threshold_pct=PCT_THRESHOLD):
    df = pd.read_excel(DB_FILE, index_col=[0,1])
    if df.shape[1] < 2:
        print("Not enough dates to compare.")
        return
    prev, curr = df.columns[-2], df.columns[-1]
    df['diff'] = df[curr] - df[prev]
    df['pct_change'] = np.where(df[prev] != 0, df['diff'] / df[prev], 0)
    sig = df[(df['diff'].abs() > threshold_abs) | (df['pct_change'].abs() > threshold_pct)].copy()
    new = df[(df[prev] == 0) & (df[curr] > 0)].copy()
    paid = df[(df[prev] > 0) & (df[curr] == 0)].copy()

    with pd.ExcelWriter(CHANGES_FILE) as writer:
        sig.drop(columns=['pct_change']).to_excel(writer, sheet_name="Significant")
        new.drop(columns=['pct_change']).to_excel(writer, sheet_name="New")
        paid.drop(columns=['pct_change']).to_excel(writer, sheet_name="Paidoff")
    print(f"Significant changes written to {CHANGES_FILE}")

# === FUNCTION: DETECT ANOMALIES ===
def detect_anomalies():
    df = pd.read_excel(DB_FILE, index_col=[0,1])
    results = []
    for isin in df.index:
        vals = df.loc[isin].values
        nonzero = (vals > 0).astype(int)
        switches = np.diff(nonzero)
        if np.count_nonzero(switches) >= 2:
            results.append((isin[0], isin[1], list(df.columns[1:][np.where(switches != 0)[0] + 1])))
    if results:
        out = pd.DataFrame(results, columns=["Security", "Asset Class", "Anomaly Dates"])
        out.to_excel("anomalies.xlsx", index=False)
        print("Anomalies detected and saved.")
    else:
        print("No anomalies found.")

# === FUNCTION: BACKUP ===
def Backup():
    os.makedirs(BackupFolder, exist_ok=True)
    sources_folder = os.path.join(BackupFolder, "Sources")
    os.makedirs(sources_folder, exist_ok=True)

    for file in os.listdir():
        if file.endswith(".xlsx"):
            if file.startswith("SF"):
                dest_path = os.path.join(sources_folder, file)
                if not os.path.exists(dest_path):
                    shutil.copy2(file, dest_path)
            else:
                shutil.copy2(file, os.path.join(BackupFolder, file))

    print("All relevant files backed up to:", BackupFolder)
