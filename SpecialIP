import pandas as pd
from scipy.optimize import minimize_scalar

def optimize_row(row, target=0.2, bounds=(0.1, 0.3)):
    """
    Optimizes W for a given row using minimize_scalar to find the value
    where CalculateRW(W, row) is closest to the target.
    
    Parameters:
        row (pd.Series): The row from the DataFrame to use in CalculateRW.
        target (float): The target value for CalculateRW(W).
        bounds (tuple): The bounds for W optimization.
    
    Returns:
        float: The optimal W for the given row, or None if optimization fails.
    """
    def CalculateRW(W, row):
        # Replace this with your actual row-specific function
        return 0.2 + 0.01 * W + row.get('adjustment', 0)

    def objective(W):
        return abs(CalculateRW(W, row) - target)

    result = minimize_scalar(objective, bounds=bounds, method='bounded')

    # Return the optimal W if the optimization succeeded
    return result.x if result.success else None

# Example DataFrame
data = {
    'id': [1, 2, 3],
    'adjustment': [0.0, 0.005, -0.002]  # Example adjustments for each row
}
df = pd.DataFrame(data)

# Apply the optimization row-wise
df['optimal_W'] = df.apply(lambda row: optimize_row(row), axis=1)

print(df)
