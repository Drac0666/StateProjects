import random
import numpy as np
import pandas as pd

def monte_carlo_var(paths, rate_changes):
    # Initialize variables
    path_results = np.zeros((paths, 2))
    results_var = np.zeros((5, 2))

    # Convert rate_changes to numpy array for faster access
    data = rate_changes.to_numpy()
    data_points = len(data)

    for k in range(paths):
        # Produce rate change for one path
        new_product = 1
        for j in range(21):
            new_day = int(random.random() * data_points - 0.5) + 1
            new_rate = data[new_day - 1]
            new_product *= new_rate
        path_results[k, 0] = new_product  # Monthly path result

        for j in range(21, 252):
            new_day = int(random.random() * data_points - 0.5) + 1
            new_rate = data[new_day - 1]
            new_product *= new_rate
        path_results[k, 1] = new_product  # Annual path result

    # Sort the 5% lowest results
    for i in range(1, paths // 20):
        for j in range(paths - i):
            if path_results[j, 0] < path_results[j + 1, 0]:
                path_results[j, 0], path_results[j + 1, 0] = path_results[j + 1, 0], path_results[j, 0]

    # Sort the 5% highest results
    for i in range(1, paths // 20):
        for j in range(paths - i):
            if path_results[j, 0] > path_results[j + 1, 0]:
                path_results[j, 0], path_results[j + 1, 0] = path_results[j + 1, 0], path_results[j, 0]

    # Compute VaR results
    for k in range(2):
        results_var[0, k] = path_results[paths // 100, k]  # 99% VaR
        results_var[1, k] = path_results[paths // 200, k]  # 99.5% VaR
        results_var[2, k] = path_results[paths // 1000, k]  # 99.9% VaR
        results_var[3, k] = path_results[paths // 2000, k]  # 99.95% VaR
        results_var[4, k] = path_results[paths // 10000, k]  # 99.98% VaR

    return results_var

# Example usage:
paths = 1000
rate_changes = pd.Series([random.uniform(0.9, 1.1) for _ in range(252)])

results_var = monte_carlo_var(paths, rate_changes)
print(results_var)
