import pandas as pd

# Sample dictionary of dataframes for demonstration
data_dict = {
    'df1': pd.DataFrame({'index_label': [1, 2, 3], 'value': [10, 20, 30]}).set_index('index_label'),
    'df2': pd.DataFrame({'index_label': [4, 5, 6], 'value': [40, 50, 60]}).set_index('index_label'),
    'df3': pd.DataFrame({'index_label': [7, 8, 9], 'value': [70, 80, 90]}).set_index('index_label')
}

# Create an empty dictionary to hold the new dataframes
new_dataframe_dict = {}

# Iterate through each dataframe in the original dictionary
for key, df in data_dict.items():
    try:
        # Check if the dataframe has a label-based index (using 'loc')
        # Here we just verify that we can access data by label; if label is not found, it raises KeyError
        if not df.index.empty:
            # Extract the entire dataframe or specific rows using .loc[]
            # In this case, let's say we're extracting all data
            extracted_data = df.loc[df.index]  # We can modify to extract based on conditions
            
            # Add the extracted data to the new dictionary with the same key
            new_dataframe_dict[key] = extracted_data
    except KeyError:
        # If no label-based index exists or extraction fails, skip this dataframe
        print(f"No label-based index found for {key}, skipping.")
        
# The new dataframe_dict contains the dataframes sourced from the label-based index
print(new_dataframe_dict)
