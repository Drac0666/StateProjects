import pandas as pd
import numpy as np

def monte_carlo_paths():
    input_path = r"\\malpw1024\CreditOffice\Treasury Risk Team\FX Risk\FX Simulations\FX VaR Tool\input.xlsx"

    # Load input data
    input_workbook = pd.ExcelFile(input_path)
    rates_input = input_workbook.parse("rates input")
    parameters = input_workbook.parse("parameters")
    rate_change = input_workbook.parse("rate_change")

    search_date = pd.to_datetime("2002-01-02")
    found_point = rates_input[rates_input.iloc[:, 0] == search_date]

    if found_point.empty:
        print(f"Value {search_date} not found in Column A.")
        return

    data_points = found_point.index[0]
    data = rate_change.iloc[:data_points, 1:].to_numpy()

    currencies_num = int(parameters.iloc[0, 1])
    paths = int(parameters.iloc[1, 1])

    results_var = np.zeros((2, 6, currencies_num, 2))

    for n in range(currencies_num):
        path_results = np.zeros((paths,))

        # Simulate paths
        for i in range(paths):
            new_product = np.prod(np.random.choice(data[:, n], 20) * np.random.random(20) + 0.5)
            new_product *= np.prod(np.random.choice(data[:, n], 232))
            path_results[i] = new_product

        # Sort and calculate VaR
        path_results.sort()
        for level, percentile in enumerate([0.99, 0.995, 0.999, 0.9995, 0.9998, 0.95]):
            lower_idx = int((1 - percentile) * paths)
            upper_idx = int(percentile * paths) - 1
            results_var[0, level, n, 0] = path_results[lower_idx]  # Long VaR
            results_var[0, level, n, 1] = path_results[upper_idx]  # Short VaR

    print("Monte Carlo simulation completed.")

# Call the function
monte_carlo_paths()
