import pandas as pd
from openpyxl import load_workbook
from datetime import datetime
import customtkinter as ctk
from tkinter.filedialog import askopenfilename
from tkinter.messagebox import showinfo
import logging
from functools import wraps

# Set up logging
logging.basicConfig(
    filename="process_log.txt",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# Logging decorator
def log_decorator(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        func_name = func.__name__
        try:
            logging.info(f"Executing {func_name} with args: {args} and kwargs: {kwargs}")
            result = func(*args, **kwargs)
            logging.info(f"Execution of {func_name} completed successfully.")
            return result
        except Exception as e:
            logging.error(f"Error in {func_name}: {e}")
            raise
    return wrapper

# Function to find the column for an identifier
@log_decorator
def find_column_with_identifier(sheet, identifier):
    for col in sheet.iter_cols(min_row=1, max_row=1, min_col=1):
        if col[0].value == identifier:
            return col[0].column
    return None

# Function to find the first empty row in a column
@log_decorator
def find_first_empty_row(sheet, column):
    for row in range(1, sheet.max_row + 2):  # Include an extra row in case it's empty
        if sheet.cell(row=row, column=column).value is None:
            return row
    return None

# Function to check if a date already exists in a column
@log_decorator
def is_date_already_added(sheet, column, date):
    for row in range(2, sheet.max_row + 1):  # Start from row 2 to skip the header
        cell_value = sheet.cell(row=row, column=column).value
        if isinstance(cell_value, datetime) and cell_value.date() == date:
            return True
    return False

# Function to update the Excel file
@log_decorator
def update_excel(file_path, sheet_name, df):
    df["Date"] = pd.to_datetime(df["Date"], format="%m/%d/%Y")

    workbook = load_workbook(file_path)
    sheet = workbook[sheet_name]

    for _, row in df.iterrows():
        identifier = row["Identifier"]
        date = row["Date"].date()
        px_last = row["PX_LAST"]

        column = find_column_with_identifier(sheet, identifier)
        if not column:
            logging.warning(f"Identifier '{identifier}' not found in the Excel sheet.")
            continue

        if is_date_already_added(sheet, column, date):
            logging.info(f"Date '{date}' already exists for Identifier '{identifier}'. Skipping.")
            continue

        first_empty_row = find_first_empty_row(sheet, column)
        if not first_empty_row:
            logging.warning(f"No empty row found for column {column} and identifier '{identifier}'.")
            continue

        date_cell = sheet.cell(row=first_empty_row, column=column, value=date)
        date_cell.number_format = "yyyy-mm-dd"
        sheet.cell(row=first_empty_row, column=column + 1, value=px_last)

        logging.info(f"Updated Identifier '{identifier}' at row {first_empty_row}, column {column}.")

    workbook.save(file_path)
    logging.info("Excel file updated successfully.")

# GUI Setup
@log_decorator
def load_mdp():
    global df
    file_path = askopenfilename(title="Select MDP File", filetypes=[("CSV Files", "*.csv"), ("Excel Files", "*.xlsx")])
    if file_path:
        try:
            if file_path.endswith(".csv"):
                df = pd.read_csv(file_path)
            elif file_path.endswith(".xlsx"):
                df = pd.read_excel(file_path)
            showinfo("Success", "MDP file loaded successfully.")
        except Exception as e:
            showinfo("Error", "Failed to load MDP file.")
            logging.error(f"Failed to load MDP file '{file_path}': {e}")
    else:
        logging.warning("No MDP file selected.")

@log_decorator
def process_excel():
    if df is None:
        showinfo("Error", "Please load the MDP file first.")
        logging.warning("Attempted to process Excel without loading MDP.")
        return

    file_path = askopenfilename(title="Select Excel File to Process", filetypes=[("Excel Files", "*.xlsx")])
    if file_path:
        sheet_name = "Sheet1"  # Change if necessary
        try:
            update_excel(file_path, sheet_name, df)
            showinfo("Success", "Excel file processed successfully.")
        except Exception as e:
            showinfo("Error", "Failed to process Excel file.")
            logging.error(f"Failed to process Excel file '{file_path}': {e}")
    else:
        logging.warning("No Excel file selected.")

# Initialize global variables
df = None

# Create the GUI window
ctk.set_appearance_mode("System")
ctk.set_default_color_theme("blue")

app = ctk.CTk()
app.title("MDP and Excel Processor")
app.geometry("400x200")

# Add buttons to the GUI
load_mdp_button = ctk.CTkButton(app, text="Load MDP", command=load_mdp)
load_mdp_button.pack(pady=20)

process_excel_button = ctk.CTkButton(app, text="Process Excel", command=process_excel)
process_excel_button.pack(pady=20)

# Run the GUI application
app.mainloop()
