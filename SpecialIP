import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency, pointbiserialr
from sklearn.preprocessing import LabelEncoder

# Load your dataset
# df = pd.read_csv('your_dataset.csv')

# Selected columns you want to analyze
selected_columns = ["Column1", "Column2", "Column3", "Column4"]  # Replace with actual column names

# Convert 'Delinquency' column to binary (1 for 'Y', 0 for 'N')
df['Delinquency'] = df['Delinquency'].apply(lambda x: 1 if x == 'Y' else 0)

# Initialize a list to hold the results
results = []

# Function to analyze categorical columns using Chi-square test
def analyze_categorical(col):
    contingency_table = pd.crosstab(df[col], df['Delinquency'])
    chi2, p, _, _ = chi2_contingency(contingency_table)
    return p, chi2

# Function to analyze numeric columns using Point-biserial correlation
def analyze_numeric(col):
    # Convert the column to numeric, forcing errors to NaN
    df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Drop rows where the column or Delinquency is NaN
    valid_data = df[[col, 'Delinquency']].dropna()
    
    # If the column still contains valid data, calculate correlation
    if len(valid_data) > 0:
        correlation, p_value = pointbiserialr(valid_data[col], valid_data['Delinquency'])
        return p_value, correlation
    else:
        return None, None

# Loop through each selected column to check influence
for col in selected_columns:
    if df[col].dtype == 'object':
        # Analyze categorical columns
        p_val, test_stat = analyze_categorical(col)
        results.append({
            'feature': col,
            'test_type': 'Chi-square',
            'test_statistic': test_stat,
            'p_value': p_val
        })
    else:
        # Analyze numeric columns
        p_val, correlation = analyze_numeric(col)
        if p_val is not None and correlation is not None:
            results.append({
                'feature': col,
                'test_type': 'Point-biserial',
                'test_statistic': correlation,
                'p_value': p_val
            })
        else:
            print(f"Skipping column {col} due to insufficient data after cleaning.")

# Convert results to a DataFrame for better viewing
results_df = pd.DataFrame(results).sort_values(by='test_statistic', ascending=False)

# Display the results to the user
import ace_tools as tools; tools.display_dataframe_to_user(name="Influence on Delinquency", dataframe=results_df)

# Print the most influential feature
most_influential = results_df.iloc[0]
print(f"The most influential feature is: {most_influential['feature']} with test statistic {most_influential['test_statistic']} and p-value {most_influential['p_value']}")
