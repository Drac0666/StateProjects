import pandas as pd
import os
from datetime import datetime, timedelta
import shutil

# === CONSTANT ===
BackupFolder = "ParValue_Backups"

# === BACKUP FUNCTION ===
def Backup():
    os.makedirs(BackupFolder, exist_ok=True)
    sources_folder = os.path.join(BackupFolder, "Sources")
    os.makedirs(sources_folder, exist_ok=True)

    for file in os.listdir():
        if file.endswith(".xlsx"):
            if file.startswith("SF"):
                dest_path = os.path.join(sources_folder, file)
                if not os.path.exists(dest_path):
                    shutil.copy2(file, dest_path)
            else:
                shutil.copy2(file, os.path.join(BackupFolder, file))

    print("All relevant files backed up to:", BackupFolder)

# === ENHANCED FUNCTION: EXPORT MONTHLY ACTIVITY ===
def export_monthly_activity_enhanced(activity_file: str = "activity_log.xlsx", month: str = None, Chart: bool = False):
    if not os.path.exists(activity_file):
        print("Activity log file not found. Run generate_activity() first.")
        return

    df = pd.read_excel(activity_file)
    df["Date"] = pd.to_datetime(df["Date"])
    df["Month"] = df["Date"].dt.to_period("M")

    # Determine the target month
    if month is None:
        target_period = (datetime.today().replace(day=1) - timedelta(days=1)).strftime("%Y-%m")
    else:
        target_period = pd.to_datetime(month).strftime("%Y-%m")

    df = df[df["Month"].astype(str) == target_period]
    if df.empty:
        print(f"No data for {target_period}.")
        return

    df[['SEC_1', 'SEC_2', 'SEC_3', 'Description']] = df['Asset Class'].str.split('_', n=3, expand=True)
    # Save raw value for calculations before formatting
    df["ValueRaw"] = df["Value"]
    df["Value"] = df["ValueRaw"].map("{:,.2f}".format)

    purchases = df[df["Activity"] == "Purchase"]
    paidoffs = df[df["Activity"] == "Paidoff"]

    def clean_output(data):
        data = data.rename(columns={"ISIN": "Security"})
        return data[["Security", "SEC_1", "SEC_2", "SEC_3", "Description", "Value"]].reset_index(drop=True)

    df_purchases = clean_output(purchases).sort_values(by="SEC_1")
    df_paidoffs = clean_output(paidoffs).sort_values(by="SEC_1")

    with pd.ExcelWriter("MonthlyActivity_Formatted.xlsx", engine="openpyxl") as writer:
        df_purchases.to_excel(writer, sheet_name="Purchases", index=False)
        df_paidoffs.to_excel(writer, sheet_name="Paidoff", index=False)

        # Generate HTML tables for email
    purchases_html = df_purchases.style.set_table_attributes('border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse; width:100%"')\
        .set_table_styles([\
            {'selector': 'th', 'props': [('background-color', '#003366'), ('color', 'white'), ('font-weight', 'bold')]},\
            {'selector': 'td', 'props': [('border-bottom', '1px solid #ddd')]}\
        ]).hide(axis='index').to_html()
    paidoffs_html = df_paidoffs.style.set_table_attributes('border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse; width:100%"')\
        .set_table_styles([\
            {'selector': 'th', 'props': [('background-color', '#003366'), ('color', 'white'), ('font-weight', 'bold')]},\
            {'selector': 'td', 'props': [('border-bottom', '1px solid #ddd')]}\
        ]).hide(axis='index').to_html()

    # Build email body
    purchases_count = len(df_purchases)
    purchases_total = purchases["ValueRaw"].sum() / 1_000_000
    paidoffs_count = len(df_paidoffs)
    paidoffs_total = paidoffs["ValueRaw"].sum() / 1_000_000

    # Optional chart export and embed
    chart_img_tag = ""
    if Chart:
        try:
            import plotly.io as pio
            from plotly.io import read_html

            fig = read_html("asset_class_breakdown.html")
            fig.write_image("asset_class_breakdown.png", format="png", engine="orca")
            print("Chart rendered to asset_class_breakdown.png")
            chart_img_tag = '<br><img src="cid:chart_image" style="width:100%; max-width:800px;"><br>'
        except Exception as e:
            print(f"Could not render chart image: {e}")
    paidoffs_count = len(df_paidoffs)
    paidoffs_total = paidoffs["ValueRaw"].sum() / 1_000_000

        if Chart:
        try:
            import plotly.io as pio
            from plotly.io import read_html

            fig = read_html("asset_class_breakdown.html")
            fig.write_image("asset_class_breakdown.png", format="png", engine="orca")
            print("Chart rendered to asset_class_breakdown.png")
            chart_img_tag = '<br><img src="cid:chart_image" style="width:100%; max-width:800px;"><br>'
        except Exception as e:
            print(f"Could not render chart image: {e}")
            chart_img_tag = ""
    else:
        chart_img_tag = ""

    html_body = f"""
    <html>
    <body>
        <p>Dear Team,</p>
        <p>Please find below the par value activity summary for <strong>{target_period}</strong>.</p>{chart_img_tag}
        <h3>Purchases - {purchases_count} Securities with total Par Value of {purchases_total:,.2f}M</h3>
        {purchases_html}
        <h3>Paidoff - {paidoffs_count} Securities with total Par Value of {paidoffs_total:,.2f}M</h3>
        {paidoffs_html}
        <p>Best regards,<br>Your Automation Bot</p>
    </body>
    </html>
    """

    try:
        import win32com.client as win32
        outlook = win32.Dispatch('Outlook.Application')
        mail = outlook.CreateItem(0)
        mail.Subject = f"Par Value Activity Summary - {target_period}"
        mail.HTMLBody = html_body
        import os
                chart_path = os.path.abspath("asset_class_breakdown.png")
        if Chart and os.path.exists(chart_path):
            mail.Attachments.Add(chart_path)
            mail.HTMLBody = mail.HTMLBody.replace("cid:chart_image", "chart_image")
            attachment = mail.Attachments.Item(mail.Attachments.Count)
            attachment.PropertyAccessor.SetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F", "chart_image")
            attachment = mail.Attachments.Item(mail.Attachments.Count)
            attachment.PropertyAccessor.SetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F", "chart_image")

        mail.Display()
        print("Outlook email created and ready for review.")

    Backup()
    except Exception as e:
        print(f"Could not create Outlook email: {e}")
