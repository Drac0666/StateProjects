import pandas as pd

# Example DataFrame (feel free to replace with your data)
data = {
    'Parent Asset Class': ['RMBS', 'RMBS', 'RMBS', 'RMBS', 'RMBS', 'RMBS', 'RMBS'],
    'Asset Class': ['European RMBS', 'European RMBS', 'European RMBS', 'US RMBS', 'US RMBS', 'US RMBS', 'US RMBS'],
    'Sub Asset Class': ['Italian RMBS', 'Spanish RMBS', 'Dutch RMBS', 'Prime RMBS', 'Prime RMBS', 'Alt-A RMBS', 'Alt-A RMBS'],
    'Parent Asset Class Limit': [1_000_000_000] * 7,
    'Asset Class Limit': [500_000_000] * 3 + [500_000_000] * 4,
    'Sub Asset Class Limit': [75_000_000, 150_000_000, 100_000_000, 300_000_000, 300_000_000, 200_000_000, 200_000_000],
    'Par Value': [40_000_000, 30_000_000, 75_000_000, 150_000_000, 100_000_000, 120_000_000, 30_000_000]
}

df = pd.DataFrame(data)

# GROUP 1️⃣ Parent Level
parent_group = df.groupby('Parent Asset Class').agg({
    'Par Value': 'sum',
    'Parent Asset Class Limit': 'first'
}).reset_index()

parent_group['Utilization %'] = (parent_group['Par Value'] / parent_group['Parent Asset Class Limit'] * 100).round(2)

# GROUP 2️⃣ Asset Class Level
asset_group = df.groupby(['Parent Asset Class', 'Asset Class']).agg({
    'Par Value': 'sum',
    'Asset Class Limit': 'first'
}).reset_index()

asset_group['Utilization %'] = (asset_group['Par Value'] / asset_group['Asset Class Limit'] * 100).round(2)

# GROUP 3️⃣ Sub Asset Class Level
subasset_group = df.groupby(['Parent Asset Class', 'Asset Class', 'Sub Asset Class']).agg({
    'Par Value': 'sum',
    'Sub Asset Class Limit': 'first'
}).reset_index()

subasset_group['Utilization %'] = (subasset_group['Par Value'] / subasset_group['Sub Asset Class Limit'] * 100).round(2)

# COMBINE into a hierarchical display
rows = []

# Loop over Parent Asset Classes
for _, parent_row in parent_group.iterrows():
    parent_name = f"{parent_row['Parent Asset Class']}"
    rows.append({
        'Name': parent_name,
        'Par Value': parent_row['Par Value'],
        'Limit': parent_row['Parent Asset Class Limit'],
        'Utilization %': parent_row['Utilization %']
    })
    
    # Filter for Asset Classes under this parent
    asset_subset = asset_group[asset_group['Parent Asset Class'] == parent_row['Parent Asset Class']]
    
    for _, asset_row in asset_subset.iterrows():
        asset_name = f"   {asset_row['Asset Class']}"  # Indent 3 spaces
        rows.append({
            'Name': asset_name,
            'Par Value': asset_row['Par Value'],
            'Limit': asset_row['Asset Class Limit'],
            'Utilization %': asset_row['Utilization %']
        })
        
        # Filter for Sub Asset Classes under this Asset Class
        subasset_subset = subasset_group[
            (subasset_group['Parent Asset Class'] == parent_row['Parent Asset Class']) &
            (subasset_group['Asset Class'] == asset_row['Asset Class'])
        ]
        
        for _, sub_row in subasset_subset.iterrows():
            subasset_name = f"      {sub_row['Sub Asset Class']}"  # Indent 6 spaces
            rows.append({
                'Name': subasset_name,
                'Par Value': sub_row['Par Value'],
                'Limit': sub_row['Sub Asset Class Limit'],
                'Utilization %': sub_row['Utilization %']
            })

# Create the final report DataFrame
hierarchy_report = pd.DataFrame(rows)

# Format numbers with commas and 2 decimals
hierarchy_report['Par Value'] = hierarchy_report['Par Value'].apply(lambda x: f"{x:,.0f}")
hierarchy_report['Limit'] = hierarchy_report['Limit'].apply(lambda x: f"{x:,.0f}")
hierarchy_report['Utilization %'] = hierarchy_report['Utilization %'].apply(lambda x: f"{x:.2f}%")

# Display the final report
print(hierarchy_report)

