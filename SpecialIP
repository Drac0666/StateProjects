from sqlalchemy import create_engine, inspect, text
from sqlalchemy.exc import SQLAlchemyError

# Database connection details
db_host = "x.gan"
db_service_name = "TDR"
db_username = "your_username"  # Replace with your username
db_password = "your_password"  # Replace with your password

# Connection string for Oracle database using cx_Oracle connector
connection_string = (
    f"oracle+cx_oracle://{db_username}:{db_password}@"
    f"{db_host}/?service_name={db_service_name}"
)

try:
    # Create an SQLAlchemy engine
    engine = create_engine(connection_string)

    # Test the connection and inspect metadata
    with engine.connect() as connection:
        print("Connected to Oracle database successfully.")

        # Create an inspector to fetch metadata
        inspector = inspect(engine)

        # Check if 'mdd' table exists
        default_schema = db_username.upper()  # Default schema is typically the username
        tables = inspector.get_table_names(schema=default_schema)

        if "mdd" in tables:
            print(f"Table 'mdd' exists in schema '{default_schema}'.")

            # Fetch column details
            print("Columns in 'mdd':")
            columns = inspector.get_columns("mdd", schema=default_schema)
            for column in columns:
                print(f" - {column['name']} ({column['type']})")

            # Optionally, preview the first few rows of the table
            print("\nPreviewing data from 'mdd':")
            query = text("SELECT * FROM mdd FETCH FIRST 10 ROWS ONLY")
            result = connection.execute(query)
            for row in result:
                print(row)

        else:
            print(f"Table 'mdd' does not exist in schema '{default_schema}'.")

except SQLAlchemyError as e:
    print("Error while connecting to Oracle database:", e)

finally:
    if 'engine' in locals():
        engine.dispose()
        print("Connection closed.")
