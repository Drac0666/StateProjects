import pandas as pd
from itertools import combinations

# Sample data
data = {
    'Deal ID': ['A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C'],
    'DQ': [1, 0, 1, 1, 1, 0, 1, 0, 1],
    'Current Balance': [100, 200, 150, 300, 400, 500, 600, 700, 800],
    'LTV': [65, 75, 60, 80, 50, 70, 55, 90, 60],
    'Amortization': ['IO', 'Full', 'IO', 'IO', 'Full', 'IO', 'Full', 'IO', 'IO'],
    'GrossCoupon Bucket': ['Bucket 3', 'Bucket 1', 'Bucket 3', 'Bucket 2', 'Bucket 3', 'Bucket 2', 'Bucket 3', 'Bucket 1', 'Bucket 3'],
    'IssueDateBucket': ['2013', '2015', '2012', '2014', '2011', '2016', '2013', '2015', '2014']
}
df = pd.DataFrame(data)

# Define the conditions as lambda functions
conditions = {
    'LTV < 70': lambda df: df['LTV'] < 70,
    'Amortization == IO': lambda df: df['Amortization'] == 'IO',
    'GrossCoupon Bucket == Bucket 3': lambda df: df['GrossCoupon Bucket'] == 'Bucket 3',
    'IssueDateBucket < 2014': lambda df: df['IssueDateBucket'] < '2014'
}

# Function to calculate Current Balance for DQ == 1 under each combination of conditions
results = []

# Check individual and combination conditions
for i in range(1, len(conditions) + 1):
    for combo in combinations(conditions.keys(), i):
        # Apply the combined conditions
        combined_condition = df['DQ'] == 1
        for condition_name in combo:
            combined_condition &= conditions[condition_name](df)
        
        # Calculate the sum of Current Balance for DQ == 1 under this combination
        current_balance_sum = df.loc[combined_condition, 'Current Balance'].sum()
        
        # Save the results
        results.append({
            'Conditions': ' & '.join(combo),
            'Current Balance (DQ == 1)': current_balance_sum
        })

# Convert results to DataFrame for easier viewing
results_df = pd.DataFrame(results)

# Display results
print(results_df)
