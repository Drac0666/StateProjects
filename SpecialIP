from scipy.optimize import minimize_scalar

def find_W_for_target(CalculateRW, target=0.21, lower_bound=0.201):
    """
    Finds W such that CalculateRW(W) is as close as possible to target
    but not less than lower_bound using scipy's minimize_scalar.

    Parameters:
        CalculateRW (function): The function to evaluate.
        target (float): The target value for CalculateRW(W).
        lower_bound (float): The minimum allowable output for CalculateRW(W).

    Returns:
        float: The best W that meets the criteria.
    """
    # Define the objective function
    def objective(W):
        value = CalculateRW(W)
        if value < lower_bound:  # Penalize values below the lower_bound
            return float('inf')
        return abs(value - target)  # Minimize the absolute difference

    # Search within a reasonable range for W (adjust based on your function's behavior)
    result = minimize_scalar(objective, bounds=(0, 10), method='bounded')

    if result.success:
        return result.x  # Optimal W
    else:
        raise ValueError("Optimization failed. Please check the function and constraints.")

# Example usage:
# Define your CalculateRW function
def CalculateRW(W):
    return 0.2 + 0.01 * W  # Replace this with your actual function

# Find the W
result_W = find_W_for_target(CalculateRW)
print(f"The best W is: {result_W}")
print(f"Function output at W: {CalculateRW(result_W)}")
