# === FUNCTION: GUI TO VIEW EXCEL WITH SEARCH ===
def show_excel_gui(file_list, display_columns=None, isin_column='ISIN'):
    import pandas as pd
    import os
    import tkinter.ttk as ttk

    app = ctk.CTk()
    app.title("Excel Viewer with Search and File Selector")
    app.geometry("1100x650")

    selected_file = StringVar(master=app, value=file_list[0])
    df = pd.read_excel(selected_file.get())

    def reload_file(choice):
        nonlocal df
        df = pd.read_excel(choice)
        selected_file.set(choice)
        file_label.configure(text=f"Current File: {os.path.basename(choice)}")
        update_table()

    if display_columns:
        df = df[display_columns]

    app = ctk.CTk()
    app.title("Excel Viewer with Search and File Selector")
    app.geometry("1100x650")

    search_var = StringVar(master=app)

    def update_table():
        missing_label.configure(text="")
        query = search_var.get().lower()
        multi_lines = multi_filter_box.get("1.0", "end").strip().splitlines()
        multi_lines = [line.strip().lower() for line in multi_lines if line.strip()]

        for row in tree.get_children():
            tree.delete(row)

        if not query and not multi_lines:
            filtered = df.copy()
        else:
            mask = pd.Series([False] * len(df))
            if query:
                mask |= df.apply(lambda row: row.astype(str).str.lower().str.contains(query).any(), axis=1)
            if multi_lines and isin_column in df.columns:
                mask |= df[isin_column].astype(str).str.lower().isin(multi_lines)
            filtered = df[mask]

        # Show missing ISINs
        if multi_lines and isin_column in df.columns:
            isin_set = set(df[isin_column].astype(str).str.lower())
            missing = [val for val in multi_lines if val not in isin_set]
            if missing:
                # Show popup for missing ISINs
                import tkinter.messagebox as msg
                full_list = '
'.join(missing)
                msg.showinfo("Missing ISINs", f"{len(missing)} ISIN(s) not found:

{full_list}")
                missing_label.configure(text=f"Missing: {len(missing)} | {', '.join(missing[:5]) + ('...' if len(missing) > 5 else '')}")

        for _, row in filtered.iterrows():
            tree.insert("", "end", values=list(row))

    def copy_selected_row(event):
        selected = tree.selection()
        if selected:
            values = tree.item(selected[0])['values']
            header = "	".join(tree['columns'])
            row_data = "	".join(map(str, values))
            full_data = f"{header}
{row_data}"
            app.clipboard_clear()
            app.clipboard_append(full_data)
            app.update()

    dropdown = ctk.CTkOptionMenu(app, values=file_list, command=reload_file, variable=selected_file)
    dropdown.pack(pady=5)

    file_label = ctk.CTkLabel(app, text=f"Current File: {os.path.basename(selected_file.get())}")
    file_label.pack(pady=2)

    search_entry = ctk.CTkEntry(app, textvariable=search_var, placeholder_text="Search All Columns")
    search_entry.pack(pady=5)
    search_entry.bind("<KeyRelease>", lambda e: update_table())

    multi_filter_label = ctk.CTkLabel(app, text="Paste multiple Securities (one per line):")
    multi_filter_label.pack()

    multi_filter_box = ctk.CTkTextbox(app, height=80)
    multi_filter_box.pack(pady=5)
    multi_filter_box.bind("<KeyRelease>", lambda e: update_table())

    missing_label = ctk.CTkLabel(app, text="", text_color="orange")
    missing_label.pack(pady=2)

    frame = ctk.CTkFrame(app)
    frame.pack(fill="both", expand=True)

    x_scroll = ttk.Scrollbar(frame, orient="horizontal")
    y_scroll = ttk.Scrollbar(frame, orient="vertical")
    tree = ttk.Treeview(frame, columns=list(df.columns), show='headings', xscrollcommand=x_scroll.set, yscrollcommand=y_scroll.set)
    x_scroll.config(command=tree.xview)
    y_scroll.config(command=tree.yview)

    x_scroll.pack(side="bottom", fill="x")
    y_scroll.pack(side="right", fill="y")
    tree.pack(side="left", fill="both", expand=True)

    for col in df.columns:
        tree.heading(col, text=col)
        tree.column(col, width=120)

    tree.bind("<Button-3>", copy_selected_row)

    update_table()

    def export_to_clipboard():
        export_data = []
        for row_id in tree.get_children():
            export_data.append(tree.item(row_id)['values'])
        if not export_data:
            return
        export_df = pd.DataFrame(export_data, columns=tree['columns'])
        export_df.to_clipboard(index=False)
        print(f"Copied {len(export_df)} rows to clipboard.")

    def export_to_file():
        export_data = []
        for row_id in tree.get_children():
            export_data.append(tree.item(row_id)['values'])
        if not export_data:
            return
        export_df = pd.DataFrame(export_data, columns=tree['columns'])
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"Export_{timestamp}.csv"
        export_df.to_csv(filename, index=False)
        print(f"Exported to file: {filename}")

    button_frame = ctk.CTkFrame(app)
    button_frame.pack(pady=5)
    copy_btn = ctk.CTkButton(button_frame, text="Copy to Clipboard", command=export_to_clipboard)
    copy_btn.pack(side="left", padx=5)
    save_btn = ctk.CTkButton(button_frame, text="Save to CSV", command=export_to_file)
    save_btn.pack(side="left", padx=5)

    app.mainloop()

# === PLACEHOLDER FOR ReadingFromDrive ===
def ReadingFromDrive():
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    return file_path

# EXISTING FUNCTIONS REMAIN UNCHANGED BELOW
