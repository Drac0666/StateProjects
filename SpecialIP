from openpyxl import load_workbook
import pandas as pd
from datetime import datetime

def find_column_with_identifier(sheet, identifier):
    """Finds the column number where the first row matches the identifier."""
    for col in sheet.iter_cols(min_row=1, max_row=1, min_col=1):
        if col[0].value == identifier:
            return col[0].column
    return None

def find_first_empty_row(sheet, column):
    """Finds the first empty row in the given column."""
    for row in range(1, sheet.max_row + 2):  # Include an extra row in case it's empty
        if sheet.cell(row=row, column=column).value is None:
            return row
    return None

def is_date_already_added(sheet, column, date):
    """Checks if the date already exists in the specified column."""
    for row in range(2, sheet.max_row + 1):  # Start from row 2 to skip the header
        cell_value = sheet.cell(row=row, column=column).value
        if isinstance(cell_value, datetime) and cell_value.date() == date:
            return True
    return False

def update_excel(file_path, sheet_name, df):
    """Updates the Excel file based on the DataFrame, avoiding duplicate dates."""
    try:
        # Convert Date column to datetime objects
        df["Date"] = pd.to_datetime(df["Date"], format="%m/%d/%Y")  # Adjust format if needed

        # Load the workbook and access the specified sheet
        workbook = load_workbook(file_path)
        sheet = workbook[sheet_name]

        # Iterate over each row in the DataFrame
        for _, row in df.iterrows():
            identifier = row["Identifier"]
            date = row["Date"].date()  # Use only the date part
            px_last = row["PX_LAST"]

            # Find the column corresponding to the identifier
            column = find_column_with_identifier(sheet, identifier)
            if not column:
                print(f"Identifier '{identifier}' not found in the Excel sheet.")
                continue

            # Check if the date is already in the column
            if is_date_already_added(sheet, column, date):
                print(f"Date '{date}' already exists for Identifier '{identifier}'. Skipping.")
                continue

            # Find the first empty row in the identified column
            first_empty_row = find_first_empty_row(sheet, column)
            if not first_empty_row:
                print(f"No empty row found for column {column} and identifier '{identifier}'.")
                continue

            # Update the Excel sheet with proper date objects
            date_cell = sheet.cell(row=first_empty_row, column=column, value=date)
            date_cell.number_format = "yyyy-mm-dd"  # Set the cell as date
            sheet.cell(row=first_empty_row, column=column + 1, value=px_last)  # Write PX_LAST

            print(f"Updated Identifier '{identifier}' at row {first_empty_row}, column {column}.")

        # Save the workbook
        workbook.save(file_path)
        print("Excel file updated successfully.")

    except Exception as e:
        print(f"Error: {str(e)}")

# Example usage
file_path = "your_file.xlsx"  # Replace with your Excel file path
sheet_name = "Sheet1"  # Replace with your sheet name

# Example DataFrame
data = {
    "Identifier": ["SPX", "ABC", "DEF"],
    "Date": ["12/31/2024", "01/14/2025", "01/15/2025"],  # Dates in mm/dd/yyyy format
    "PX_LAST": [4300.25, 120.75, 85.50]
}
df = pd.DataFrame(data)

update_excel(file_path, sheet_name, df)
