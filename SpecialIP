import numpy as np
import pandas as pd

def monte_carlo_paths_numpy(data, paths):
    """Correctly calculates Monte Carlo paths with NumPy."""

    if not isinstance(data, (pd.Series, np.ndarray)):
        print("Error: data must be a pandas Series or numpy array.")
        return None
        
    if isinstance(data, pd.Series):
        data = data.values
        
    data_len = len(data)
    if data_len == 0:
        print("Error: data cannot be empty.")
        return None

    path_results = np.ones((2, paths))

    # Monthly paths (Vectorized)
    random_indices = np.random.randint(0, data_len, size=(paths, 20))
    monthly_rates = data[random_indices]
    path_results[0, :] = np.prod(monthly_rates, axis=1)

    # Annual paths (Iterating through paths, continuing from monthly)
    for i in range(paths):
        annual_product = path_results[0, i]  # Start with monthly product
        for _ in range(252 - 20):
            point = np.random.randint(0, data_len)
            annual_product *= data[point]
        path_results[1, i] = annual_product

    return path_results
