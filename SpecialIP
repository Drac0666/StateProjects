tyled_df = styled_df.set_table_styles([
    {'selector': 'th',
     'props': [('background-color', 'darkblue'), ('color', 'white'), ('font-weight', 'bold')]}
])

# Apply custom style to 'Country' and 'SubAssetClass' columns
def highlight_country_and_subasset(row):
    return ['background-color: darkblue; color: white' if row.name in ['Country', 'SubAssetClass'] else '' for _ in row]

styled_df = styled_df.apply(highlight_country_and_subasset, axis=1, subset=['Country', 'SubAssetClass'])

# Convert the styled DataFrame to HTML without the index
html_table = styled_df.render(index=False)

# Save to an HTML file for demonstration (or can be used directly in an email)
with open('styled_table.html', 'w') as f:
    f.write(html_table)

# Display the styled DataFrame in Jupyter Notebook (if needed)
styled_df
