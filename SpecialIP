import pandas as pd

# Assuming df_from_dict is already created
# Sample df with "Vintage" column for demonstration
df_vintage = pd.DataFrame({
    'CUSIP': ['series1', 'series2', 'series3'],
    'Vintage': [2021, 2022, 2023]
})

# Merge df_from_dict with df_vintage based on matching column names (CUSIP)
# We're going to first transpose df_from_dict to make its columns rows for easier merging
df_from_dict_transposed = df_from_dict.T.reset_index().rename(columns={'index': 'CUSIP'})

# Merge on the 'CUSIP' column
merged_df = pd.merge(df_from_dict_transposed, df_vintage, on='CUSIP', how='inner')

# Now, transpose it back to its original format with Vintage column
merged_df = merged_df.set_index(['CUSIP', 'Vintage']).T

# Create a dictionary where each Vintage year is the key and each subset of data is the value
data_by_vintage = {}

for vintage_year in merged_df.columns.get_level_values('Vintage').unique():
    # Extract data for each vintage
    data_by_vintage[vintage_year] = merged_df.xs(vintage_year, level='Vintage', axis=1)

# Display the dictionary with each vintage's assigned data
for vintage, data in data_by_vintage.items():
    print(f"Vintage {vintage}:\n{data}\n")
