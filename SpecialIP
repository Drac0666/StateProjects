#!/usr/bin/env python3
"""
Generate per-Asset-Class HTML reports with Plotly bar charts:
For each Asset Class -> for each CUSIP -> Collateral Loss by scenario.

Usage:
  python cusip_collateral_loss_by_asset_class.py --csv path/to/data.csv
    [--outdir ./cusip_reports]
    [--title-prefix "CUSIP Collateral Loss Report"]
    [--sort value_desc|scenario_asc|none]
"""

import argparse
import html
import re
import sys
from pathlib import Path

import pandas as pd
import plotly.express as px
import plotly.io as pio


def slugify(s: str) -> str:
    s = str(s).strip().lower()
    s = re.sub(r"[^\w\s-]", "", s)
    s = re.sub(r"[\s/]+", "_", s)
    return s[:80] or "unknown"


def build_report_html(fig_divs, title="CUSIP Collateral Loss Report"):
    css = """
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 24px; }
    .toc { margin-bottom: 24px; padding: 16px; background: #f7f7f7; border-radius: 12px; }
    .toc h2 { margin: 0 0 8px 0; font-size: 18px; }
    .toc a { margin-right: 12px; display: inline-block; text-decoration: none; }
    .chart { margin: 28px 0; }
    .chart h2 { font-size: 18px; margin: 0 0 8px 0; }
    hr { border: 0; height: 1px; background: #e6e6e6; margin: 24px 0; }
    """

    toc_links = "\n".join(f'<a href="#{sec_id}">{html.escape(label)}</a>'
                          for sec_id, label, _ in fig_divs)

    sections = []
    for sec_id, label, div_html in fig_divs:
        sections.append(
            f'<section class="chart" id="{sec_id}">'
            f'<h2>{html.escape(label)}</h2>'
            f'{div_html}'
            f'</section>'
            f'<hr/>'
        )

    sections_html = "\n".join(sections)

    return f"""<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>{html.escape(title)}</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>{css}</style>
</head>
<body>
  <h1>{html.escape(title)}</h1>
  <div class="toc">
    <h2>Jump to CUSIP</h2>
    {toc_links}
  </div>
  {sections_html}
</body>
</html>
"""


def main():
    ap = argparse.ArgumentParser(description="Build Plotly HTML reports of Collateral Loss by scenario, split by Asset Class.")
    ap.add_argument("--csv", required=True, help="Path to input CSV with columns: CUSIP, scenario, Collateral Loss, Asset Class")
    ap.add_argument("--outdir", default="cusip_reports", help="Directory to write HTML files into (created if missing)")
    ap.add_argument("--title-prefix", default="CUSIP Collateral Loss Report", help="Title prefix for each HTML report")
    ap.add_argument("--sort", choices=["value_desc", "scenario_asc", "none"], default="scenario_asc",
                    help="How to order bars within each chart")
    args = ap.parse_args()

    csv_path = Path(args.csv)
    if not csv_path.exists():
        print(f"‚ùå CSV not found: {csv_path}", file=sys.stderr)
        sys.exit(1)

    outdir = Path(args.outdir)
    outdir.mkdir(parents=True, exist_ok=True)

    # Load CSV
    df = pd.read_csv(csv_path)

    # Normalize column names
    colmap = {c.lower().strip(): c for c in df.columns}
    required = {"cusip", "scenario", "collateral loss", "asset class"}
    missing = [c for c in required if c not in colmap]
    if missing:
        print(f"‚ùå Missing required columns: {missing}\n"
              f"   Found columns: {list(df.columns)}", file=sys.stderr)
        sys.exit(2)

    C_CUSIP = colmap["cusip"]
    C_SCEN = colmap["scenario"]
    C_LOSS = colmap["collateral loss"]
    C_ASSET = colmap["asset class"]

    # Clean & coerce
    work = df[[C_CUSIP, C_SCEN, C_LOSS, C_ASSET]].copy()
    work[C_SCEN] = work[C_SCEN].astype(str)
    work[C_ASSET] = work[C_ASSET].astype(str)
    work[C_LOSS] = pd.to_numeric(work[C_LOSS], errors="coerce").fillna(0.0)

    # Global first-seen order for scenarios (used if --sort none)
    scenario_order_global = list(work[C_SCEN].drop_duplicates())

    # Iterate per Asset Class
    asset_classes = work[C_ASSET].dropna().unique().tolist()
    if not asset_classes:
        print("‚ùå No Asset Class values found.", file=sys.stderr)
        sys.exit(3)

    for asset in asset_classes:
        subset = work[work[C_ASSET] == asset].copy()
        if subset.empty:
            continue

        fig_divs = []

        for cusip, g in subset.groupby(C_CUSIP, sort=False):
            g = g.copy()

            if args.sort == "value_desc":
                order = (g.groupby(C_SCEN, as_index=False)[C_LOSS]
                           .sum()
                           .sort_values(C_LOSS, ascending=False)[C_SCEN]
                           .tolist())
            elif args.sort == "scenario_asc":
                order = sorted(g[C_SCEN].unique().tolist(), key=lambda x: (str(x).lower(), str(x)))
            else:
                order = [s for s in scenario_order_global if s in set(g[C_SCEN])]

            g[C_SCEN] = pd.Categorical(g[C_SCEN], categories=order, ordered=True)

            plot_df = g.groupby(C_SCEN, as_index=False)[C_LOSS].sum()

            fig = px.bar(
                plot_df,
                x=C_SCEN,
                y=C_LOSS,
                text=C_LOSS,
                labels={C_SCEN: "Scenario", C_LOSS: "Collateral Loss"},
                title=f"CUSIP {cusip} ‚Äî Collateral Loss by Scenario",
            )
            fig.update_traces(texttemplate="%{text:.2f}", textposition="outside")
            fig.update_layout(
                xaxis_title="Scenario",
                yaxis_title="Collateral Loss",
                uniformtext_minsize=8,
                uniformtext_mode="hide",
                bargap=0.25,
                margin=dict(l=40, r=20, t=60, b=40),
                height=420,
            )

            sec_id = f"cusip_{slugify(cusip)}"
            label = f"CUSIP {cusip}"
            div_html = pio.to_html(fig, include_plotlyjs=False, full_html=False)
            fig_divs.append((sec_id, label, div_html))

        # Build and write one HTML per Asset Class
        title = f"{args.title_prefix} ‚Äî Asset Class: {asset}"
        html_doc = build_report_html(fig_divs, title=title)
        fname = f"{csv_path.stem}_{slugify(asset)}_report.html"
        out_path = outdir / fname
        out_path.write_text(html_doc, encoding="utf-8")
        print(f"‚úÖ Wrote: {out_path.resolve()}")

    print(f"üéâ Done. Reports per Asset Class are in: {outdir.resolve()}")


if __name__ == "__main__":
    main()
