 === FUNCTION 3: UPDATE DATABASE ===
def update_database(new_file: str, db_file: str = DB_FILE):
    new_data = pd.read_excel(new_file)
    new_date = new_data['As of Date'].iloc[0]

    # Create new pivot
    new_pivot = new_data.pivot_table(index=ISIN_COL, values=PAR_VALUE_COL, aggfunc="sum")
    new_pivot.columns = [new_date]

    # Create asset class for new ISINs
    new_data["Asset Class"] = new_data["SEC 1"].astype(str) + "_" + new_data["SEC 2"].astype(str) + "_" + new_data["SEC 3"].astype(str)
    asset_class_map = new_data.drop_duplicates(subset=ISIN_COL)[[ISIN_COL, "Asset Class"]].set_index(ISIN_COL)

    if not os.path.exists(db_file):
        print("Database not found. Creating new one instead.")
        create_pivot_database(new_file, db_file)
        return

    db = pd.read_excel(db_file, index_col=ISIN_COL)

    if str(new_date) in db.columns:
        response = input(f"\n⚠️ Date {new_date} already exists. Overwrite? (y/n): ").strip().lower()
        if response != 'y':
            print("Update cancelled.")
            return
        else:
            print(f"Overwriting column for {new_date}.")
            db.drop(columns=[new_date], inplace=True)

    backup_database(db_file)

    # Identify new ISINs
    new_isins = new_pivot.index.difference(db.index)
    new_asset_class = asset_class_map.loc[new_isins] if not new_isins.empty else pd.DataFrame()

    # Ensure Asset Class column exists and update only where needed
    if "Asset Class" not in db.columns:
        db.insert(0, "Asset Class", pd.NA)

    if not new_asset_class.empty:
        db.update(new_asset_class)
        db = pd.concat([db, new_asset_class[~new_asset_class.index.isin(db.index)]], axis=0)

    # Merge pivot
    db = pd.concat([db, new_pivot], axis=1).fillna(0)
    non_date_columns = [col for col in db.columns if not isinstance(col, str) or not col.startswith("20")]
    date_columns = sorted(set(db.columns) - set(non_date_columns))
    db = db[non_date_columns + date_columns]

    db.to_excel(db_file)
    print(f"Database updated with data for {new_date}: {db_file}")
