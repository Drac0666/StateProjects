# -*- coding: utf-8 -*-
"""
Created on Tue Dec 17 16:22:25 2024

@author: edena
"""

import pandas as pd

def dict_to_dataframe(data_dict, key_column_name='Key', value_column_name='Value', count_column_name='Count of |'):
    """
    Converts a dictionary into a DataFrame with two columns: keys and values.
    Keeps only non-empty values between '||' and adds a column for the count of '|'.

    Parameters:
    data_dict (dict): The dictionary to be converted.
    key_column_name (str): Name of the column for dictionary keys.
    value_column_name (str): Name of the column for dictionary values.
    count_column_name (str): Name of the column for the count of '|' in the string.

    Returns:
    pd.DataFrame: A DataFrame with columns for keys, cleaned values, and count of '|'.
    """
    cleaned_data = []
    
    for key, value in data_dict.items():
        if isinstance(value, str):
            # Extract non-empty values between '||'
            extracted_values = [v for v in value.split('|') if v.strip()]
            count_pipes = value.count('|')  # Count the number of '|' in the string
            cleaned_data.append((key, '|'.join(extracted_values), count_pipes))
        else:
            cleaned_data.append((key, value, 0))

    # Create a DataFrame from the cleaned data
    df = pd.DataFrame(cleaned_data, columns=[key_column_name, value_column_name, count_column_name])
    return df

def create_dataframe_from_key(data_dict, target_key='DATE_YYYYMM'):
    """
    Creates a new DataFrame where each value from the target key becomes a column.
    Other keys with matching '|' counts have their values assigned to respective columns.

    Parameters:
    data_dict (dict): Input dictionary containing data.
    target_key (str): The key whose values will determine the new columns.

    Returns:
    pd.DataFrame: A DataFrame where values from target_key become columns, and other keys align with these columns.
    """
    if target_key not in data_dict:
        raise ValueError(f"Key '{target_key}' not found in the dictionary.")
    
    # Split the target key values
    target_values = [v.strip() for v in data_dict[target_key].split('|') if v.strip()]
    num_columns = len(target_values)

    # Initialize a dictionary for the DataFrame
    df_data = {'Key': []}
    for i in range(1, num_columns + 1):
        df_data[f'Column_{i}'] = []

    # Process each key in the dictionary
    for key, value in data_dict.items():
        if isinstance(value, str):
            split_values = [v.strip() for v in value.split('|') if v.strip()]
            if len(split_values) == num_columns:
                df_data['Key'].append(key)
                for i in range(num_columns):
                    df_data[f'Column_{i+1}'].append(split_values[i])
            else:
                df_data['Key'].append(key)
                for i in range(num_columns):
                    df_data[f'Column_{i+1}'].append(None)
        else:
            df_data['Key'].append(key)
            for i in range(num_columns):
                df_data[f'Column_{i+1}'].append(None)

    return pd.DataFrame(df_data)

# Example usage
data = {
    'DATE_YYYYMM': '202406|202407|202408',
    'Test1': '1.1|2.2|3.3',
    'Test2': '4.4|5.5|6.6',
    'Test3': '7.7|8.8|9.9',
    'Mismatch': '10.1|11.1'
}

result_df = create_dataframe_from_key(data, target_key='DATE_YYYYMM')
print("Resulting DataFrame:")
print(result_df)
