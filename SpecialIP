import pandas as pd
import numpy as np
import os
import shutil
from datetime import datetime, timedelta
import win32com.client as win32
import plotly.express as px
from openpyxl import load_workbook
import customtkinter as ctk
from tkinter import filedialog
from tkinter import StringVar, ttk

# === CONFIGURATION ===
BackupFolder = "ParValue_Backups"
DB_FILE = "pivoted_output.xlsx"
BACKUP_FILE = "pivoted_output_backup.xlsx"
CHANGES_FILE = "significant_changes.xlsx"
ABS_THRESHOLD = 100
PCT_THRESHOLD = 0.10
ISIN_COL = "ISIN"
PAR_VALUE_COL = "Par Value"

# === GUI LAUNCHER ===
def launch_gui():
    from PIL import Image, ImageTk
    import tkinter as tk
    status_flags = {}  # Tracks which functions have been executed
    selected_file = [None]  # mutable container to hold file path
        app = ctk.CTk()
    frame = ctk.CTkFrame(app)
    frame.pack(padx=10, pady=10, fill="both", expand=True)
    app.title("Par Value Tracker GUI")
    app.geometry("600x400")

    def run_all():
        if not selected_file[0]:
            selected_file[0] = ReadingFromDrive()
        file = selected_file[0]
        update_database(file)
        detect_significant_changes(DB_FILE)
        detect_anomaly(DB_FILE)
        generate_activity(DB_FILE)
        plot_activity_chart()
        export_activity_summaries()
        plot_cumulative_balance()
        plot_asset_class_breakdown()
        prepare_bulk_search_template()
        Backup()
        show_excel_gui(["pivoted_output.xlsx", "activity_log.xlsx"])

    def handle_update():
        if selected_file[0]:
            update_database(selected_file[0])
        else:
            print("No file selected. Please use 'Read from Drive' first.")
        update_database(file)

        def handle_read():
        selected_file[0] = ReadingFromDrive()
        print(f"Selected file: {selected_file[0]}")

    buttons = [
        ("Read from Drive", handle_read),
        ("Update Database", handle_update),
        ("Detect Significant Changes", lambda: detect_significant_changes(DB_FILE)),
        ("Detect Anomaly", lambda: detect_anomaly(DB_FILE)),
        ("Generate Activity", lambda: generate_activity(DB_FILE)),
        ("Plot Activity Chart", plot_activity_chart),
        ("Export Activity Summaries", export_activity_summaries),
        ("Plot Cumulative Balance", plot_cumulative_balance),
        ("Plot Asset Breakdown", plot_asset_class_breakdown),
        ("Prepare Bulk Template", prepare_bulk_search_template),
        ("Backup Files", Backup),
        ("Show Excel Viewer", lambda: show_excel_gui(["pivoted_output.xlsx", "activity_log.xlsx"])),
        ("Run All", run_all)
    ]

        button_widgets = {}
    for i, (label, command) in enumerate(buttons):
        row = i // 3
        col = i % 3

        def make_wrapper(cmd, label=label):
            def wrapper():
                cmd()
                status_flags[label].configure(fg_color="green")
            return wrapper

        btn = ctk.CTkButton(frame, text=label, command=make_wrapper(command))
        btn.grid(row=row, column=col * 2, padx=5, pady=5, sticky="nsew")

        status_label = ctk.CTkLabel(frame, text="", width=20, height=10, fg_color="red")
        status_label.grid(row=row, column=col * 2 + 1, padx=2, pady=5)
        status_flags[label] = status_label

    app.mainloop()

# === PLACEHOLDER FOR ReadingFromDrive ===
def ReadingFromDrive():
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    return file_path

# EXISTING FUNCTIONS REMAIN UNCHANGED BELOW
