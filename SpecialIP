import pandas as pd
import plotly.graph_objects as go
import plotly.io as pio

# Sample Data (Replace with actual data)
data = {
    'AsOfDate': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-01', '2024-01-02', '2024-01-03'],
    'FinalAssetClass': ['Equity', 'Equity', 'Equity', 'Fixed Income', 'Fixed Income', 'Fixed Income'],
    'AlternateClassification': ['Tech', 'Tech', 'Tech', 'Government', 'Government', 'Government'],
    'cusip': ['123456', '123456', '123456', '789012', '789012', '789012'],
    'W_Final': [1.2, 1.5, 1.8, 0.9, 1.0, 1.1],
    'RW': [0.3, 0.25, 0.28, 0.15, 0.18, 0.2]  # RW added for secondary axis
}

df = pd.DataFrame(data)

# Convert AsOfDate to datetime for proper plotting
df['AsOfDate'] = pd.to_datetime(df['AsOfDate'])

# Convert the figure to HTML and embed JavaScript for multi-level dropdown filtering
html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h2 style="text-align: center;">W_Final & RW Trend Over Time</h2>
    
    <div style="text-align: center; margin-bottom: 10px;">
        <label>Final Asset Class:</label>
        <select id="finalAssetClass" onchange="updateAlternateClassification()"></select>
        
        <label>Alternate Classification:</label>
        <select id="alternateClassification" onchange="updateCusip()"></select>
        
        <label>CUSIP:</label>
        <select id="cusipDropdown" onchange="filterData()"></select>
    </div>
    
    <div id="chart"></div>

    <script>
        var allData = {df.to_json(orient="records")};

        function populateDropdown(id, values) {{
            var select = document.getElementById(id);
            select.innerHTML = "";
            values.forEach(value => {{
                var option = document.createElement("option");
                option.value = value;
                option.text = value;
                select.appendChild(option);
            }});
        }}

        function updateAlternateClassification() {{
            var selectedFinalAsset = document.getElementById('finalAssetClass').value;
            var filtered = allData.filter(row => row.FinalAssetClass === selectedFinalAsset);
            var uniqueAltClasses = [...new Set(filtered.map(row => row.AlternateClassification))];
            populateDropdown('alternateClassification', uniqueAltClasses);
            updateCusip();
        }}

        function updateCusip() {{
            var selectedFinalAsset = document.getElementById('finalAssetClass').value;
            var selectedAltClass = document.getElementById('alternateClassification').value;
            var filtered = allData.filter(row => row.FinalAssetClass === selectedFinalAsset && row.AlternateClassification === selectedAltClass);
            var uniqueCusips = [...new Set(filtered.map(row => row.cusip))];
            populateDropdown('cusipDropdown', uniqueCusips);
            filterData();
        }}

        function filterData() {{
            var selectedCusip = document.getElementById('cusipDropdown').value;
            var filteredData = allData.filter(row => row.cusip === selectedCusip);

            if (filteredData.length > 0) {{
                var newTraces = [
                    {{
                        x: filteredData.map(row => row.AsOfDate),
                        y: filteredData.map(row => row.W_Final),
                        mode: 'lines+markers',
                        name: 'W_Final',
                        yaxis: 'y1'
                    }},
                    {{
                        x: filteredData.map(row => row.AsOfDate),
                        y: filteredData.map(row => row.RW),
                        mode: 'lines+markers',
                        name: 'RW',
                        yaxis: 'y2',
                        line: {{ dash: 'dot', color: 'red' }}
                    }}
                ];
                Plotly.newPlot('chart', newTraces, {{
                    title: "W_Final & RW Trend Over Time",
                    xaxis: {{title: "As of Date"}},
                    yaxis: {{title: "W_Final", side: "left", showgrid: false}},
                    yaxis2: {{title: "RW", side: "right", overlaying: "y", showgrid: false, tickmode: "sync"}},
                    legend: {{title: "Metrics"}}
                }});
            }}
        }}

        // Initialize dropdowns
        document.addEventListener("DOMContentLoaded", function() {{
            var uniqueFinalAssets = [...new Set(allData.map(row => row.FinalAssetClass))];
            populateDropdown('finalAssetClass', uniqueFinalAssets);
            updateAlternateClassification();
        }});
    </script>
</body>
</html>
"""

# Save the interactive HTML file
html_filename = "/mnt/data/w_final_rw_multilevel_filter.html"
with open(html_filename, "w", encoding="utf-8") as f:
    f.write(html_content)

# Provide download link
html_filename
