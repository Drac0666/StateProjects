def detect_significant_changes(db_file: str = DB_FILE,
                                abs_threshold: float = ABS_THRESHOLD,
                                pct_threshold: float = PCT_THRESHOLD,
                                output_file: str = CHANGES_FILE):
    df = pd.read_excel(db_file, index_col=ISIN_COL)
    full_df = df.copy()

    if df.shape[1] < 3:  # One column is Asset Class
        print("Not enough dates to compare.")
        return

    asset_class = df["Asset Class"]
    df = df.drop(columns="Asset Class")

    last_date, prev_date = df.columns[-1], df.columns[-2]
    prev_vals = df[prev_date]
    last_vals = df[last_date]
    diff = last_vals - prev_vals
    pct_change = diff / prev_vals.replace(0, 1)

    new_mask = (prev_vals == 0) & (last_vals > 0)
    df_new = df.loc[new_mask, [prev_date, last_date]].copy()
    df_new["Abs Change"] = diff[new_mask]
    df_new["% Change"] = pct_change[new_mask] * 100

    paid_mask = (prev_vals > 0) & (last_vals == 0)
    df_paidoff = df.loc[paid_mask, [prev_date, last_date]].copy()
    df_paidoff["Abs Change"] = diff[paid_mask]
    df_paidoff["% Change"] = pct_change[paid_mask] * 100

    overlap_mask = new_mask | paid_mask
    sig_mask = ((diff.abs() > abs_threshold) | (pct_change.abs() > pct_threshold)) & (~overlap_mask)
    df_significant = df.loc[sig_mask, [prev_date, last_date]].copy()
    df_significant["Abs Change"] = diff[sig_mask]
    df_significant["% Change"] = pct_change[sig_mask] * 100

    with pd.ExcelWriter(output_file) as writer:
        df_significant = df_significant.merge(full_df[["Asset Class"]], left_index=True, right_index=True)
        df_new = df_new.merge(full_df[["Asset Class"]], left_index=True, right_index=True)
        df_paidoff = df_paidoff.merge(full_df[["Asset Class"]], left_index=True, right_index=True)

        df_significant.to_excel(writer, sheet_name="Significant")
        df_new.to_excel(writer, sheet_name="New")
        df_paidoff.to_excel(writer, sheet_name="Paidoff")

    print(f"Changes saved to: {output_file}")
    print(f"  - Significant: {df_significant.shape[0]} rows")
    print(f"  - New: {df_new.shape[0]} rows")
    print(f"  - Paidoff: {df_paidoff.shape[0]} rows")
