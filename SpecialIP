import pandas as pd
import numpy as np

# Sample Series for demonstration
data_dict = {
    'series1': pd.Series([10, ' - ', 30], index=['A', 'B', 'C']),  # Extra spaces around '-'
    'series2': pd.Series([40, 50, ' - ', 70], index=['X', 'Y', 'Z', 'W']),
    'series3': pd.Series([100, ' - ', ' - '], index=['L', 'M', 'N'])  # Case with NaNs left
}

# Create an empty dictionary to store the renamed Series
renamed_dict = {}

# Iterate through each Series in the original dictionary
for key, series in data_dict.items():
    # Strip spaces around values and replace '-' with NaN
    series = series.apply(lambda x: np.nan if str(x).strip() == '-' else x)
    
    # Backfill NaN values with the last valid value
    series = series.bfill()
    
    # Drop any remaining NaN values after backfill
    series = series.dropna()
    
    # Reset the index and assign sequential numbers (starting from 1) as the new index
    renamed_series = series.reset_index(drop=True)
    renamed_series.index = renamed_series.index + 1  # To start from 1 instead of 0
    
    # Add the renamed series to the new dictionary
    renamed_dict[key] = renamed_series

# Create a common index based on the longest series
common_index = pd.Index(range(1, max([len(series) for series in renamed_dict.values()]) + 1))

# Reindex all series to the common index
for key, series in renamed_dict.items():
    renamed_dict[key] = series.reindex(common_index, method='ffill')  # Forward fill any missing values

# Create a DataFrame from the dictionary of series, where each series becomes a column
df_from_dict = pd.DataFrame(renamed_dict)

# Display the final DataFrame
print(df_from_dict)
