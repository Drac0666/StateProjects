import pandas as pd
import numpy as np
import random

# Assuming you already have the pandas Series for daily rate changes
# Replace this with your actual Series data
rate_changes = pd.Series(np.random.randn(252))  # Example data, replace with your input Series

# Parameters
data_points = len(rate_changes)  # Number of daily data points
paths = 10000  # Number of Monte Carlo paths to simulate (higher for better accuracy)

# Results storage
path_results = np.zeros((2, paths))

# Monte Carlo Simulation
for i in range(paths):
    new_product = 1

    # Simulate monthly path (first 21 days)
    for j in range(21):
        new_day = random.randint(0, data_points - 1)  # Randomly select a day
        new_rate = rate_changes.iloc[new_day]
        new_product *= new_rate

    path_results[0, i] = new_product  # Store result for monthly path

    # Simulate annual path (next 230 days)
    for j in range(22, 252):
        new_day = random.randint(0, data_points - 1)
        new_rate = rate_changes.iloc[new_day]
        new_product *= new_rate

    path_results[1, i] = new_product  # Store result for annual path

# Calculate 99% Value at Risk (VaR)
VaR_99_monthly = np.percentile(path_results[0, :], 1)  # 1st percentile for 99% worst-case
VaR_99_annual = np.percentile(path_results[1, :], 1)  # 1st percentile for 99% worst-case

# Output results
print("99% VaR (Worst-Case Scenario):")
print(f"Monthly VaR: {VaR_99_monthly}")
print(f"Annual VaR: {VaR_99_annual}")
