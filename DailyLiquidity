import pyautogui
import keyboard

def print_mouse_position():
    try:
        while True:
            # Get the current mouse position
            x, y = pyautogui.position()

            # Print the current mouse position
            print(f"Mouse Position - X: {x}, Y: {y}")

            # Wait for a short interval to avoid high CPU usage
            pyautogui.sleep(0.1)

    except KeyboardInterrupt:
        print("Script interrupted by user (Ctrl+C)")

if __name__ == "__main__":
    print("Press Ctrl+C to stop the script.")
    print_mouse_position()



import pyautogui
from PIL import ImageGrab
import io

def screenshot_to_clipboard(x, y, width, height):
    # Capture the screen image
    screen = ImageGrab.grab(bbox=(x, y, x + width, y + height))

    # Convert the image to bytes
    image_bytes = io.BytesIO()
    screen.save(image_bytes, format='PNG')
    image_bytes.seek(0)

    # Copy the image bytes to the clipboard
    pyautogui.copy(image_bytes.read())

# Specify the coordinates and dimensions of the region to capture
x, y, width, height = 100, 100, 300, 200

# Take a screenshot of the specified region and copy it to the clipboard
screenshot_to_clipboard(x, y, width, height)



import os
import shutil
import re

def create_folder_if_not_exists(folder_path):
    """
    Check if a folder exists at the specified path.
    If not, create the folder.

    Parameters:
    - folder_path (str): The path of the folder to check/create.
    """
    if not os.path.exists(folder_path):
        try:
            os.makedirs(folder_path)
            print(f"Folder created at: {folder_path}")
        except OSError as e:
            print(f"Error creating folder at {folder_path}: {e}")
    else:
        print(f"Folder already exists at: {folder_path}")

def copy_matching_files(src_folder, dest_folder, file_pattern):
    """
    Copy files from the source folder to the destination folder
    based on a regex pattern. Replace the date in the filename with "MACIEK".

    Parameters:
    - src_folder (str): Source folder path.
    - dest_folder (str): Destination folder path.
    - file_pattern (str): Regex pattern to match filenames.
    """
    for filename in os.listdir(src_folder):
        if re.search(file_pattern, filename):
            src_path = os.path.join(src_folder, filename)
            
            # Extract date from filename using regex
            date_match = re.search(r"(\d{8})", filename)
            if date_match:
                date_string = date_match.group(1)
                
                # Replace the date with "MACIEK"
                new_filename = filename.replace(date_string, "MACIEK")
                
                dest_path = os.path.join(dest_folder, new_filename)
                
                try:
                    shutil.copy2(src_path, dest_path)
                    print(f"File '{filename}' copied to: {dest_folder} with new filename '{new_filename}'")
                except Exception as e:
                    print(f"Error copying file '{filename}': {e}")

# Example usage:
src_folder_path = '/path/to/source/folder'
dest_folder_path = '/path/to/destination/folder'
file_pattern = r"_Daily Liquidity Risk Reporting"

create_folder_if_not_exists(dest_folder_path)
copy_matching_files(src_folder_path, dest_folder_path, file_pattern)
